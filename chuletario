char-> 1B
short-> 2B = -32000, 32000
int -> 4B = -2*10^9, 2*10^9

#/////////////////////////////////////////////////////#
#/////////////////////////////////////////////////////#
#////////////////////     gdb     ////////////////////#
#/////////////////////////////////////////////////////#
#/////////////////////////////////////////////////////#

-->Antes de usar gdb
	->compilacion del programa para que te permita usar gdb
		gcc -ggdb -o nombreej nombre.c
	->ejecucion en gdb (sin args)
		gdb nombreej
	->ejecucion en gdb (con args)
		gdb --args nombreej arg1 arg2
-->Comandos gdb
	->Breakpoint: b numlinea
	->Run: r
	->Continue: c
	->Print: p nombrevar
	->Salir: q

#/////////////////////////////////////////////////////#
#/////////////////////////////////////////////////////#
#////////////////////   Strings   ////////////////////#
#////////////////////  Estaticos  ////////////////////#
#/////////////////////////////////////////////////////#
---->Programa de prueba
		#include <stdio.h>
		#include <stdlib.h>
		#include <string.h>

		int main(int argc, char** argv){
			/*Declaracion de variable*/
			char nombre[1000];
			/*Declaracion de variable inicializada*/
			char nombre1[10] = "Alejandro";
			/**
			Nunca puedo hacer 
			nombre=nombre1
			**/
			/*Puedo mover el n todo lo que quiera*/
			char *n;
			n=nombre;
			n=nombre1;

			/*strcpy(dst, ori)*/
			strcpy(nombre, nombre1);
			/*Para imprimir cadenas ponemos %s y la direccion de inicio de la cadena*/
			printf("%s\n", nombre);
			printf("%s\n", &nombre1[0]);
			int lon= strlen(nombre);
			int i=0;
			for(i; i<lon; i++){
				/*Para imprimir cada caracter ponemos %c y el nombre de la variable*/

				printf("%c\n", nombre[i]);

			}
			
			while(*n!=NULL){
				/*Para imprimir cada caracter ponemos %c y el nombre de la variable*/
				printf("%c\n", *n);
				n++;
			}




		}
#/////////////////////////////////////////////////////#
#/////////////////////////////////////////////////////#
#//////////////////////  Repaso  /////////////////////#
#//////////////////////     1    /////////////////////#
#/////////////////////////////////////////////////////#
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

   int main ( int argc, char ** argv){
      char cadena[11];
      scanf("%s",cadena);
      char cadena1[11];
      strcpy(cadena1,cadena); 
      printf("%s",cadena);
      int i=strlen(cadena1);
      for (; i>=0 ; i-- ){
      	printf("%c \n", cadena1[i]);
      	}
   }



#/////////////////////////////////////////////////////#
#/////////////////////////////////////////////////////#
#////////////////////   Strings   ////////////////////#
#////////////////////  Dinamicos  ////////////////////#
#/////////////////////////////////////////////////////#
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

int main (int argc, char ** argv){
   /*Declaracion e inicializacion de variables*/
   char *a=NULL;
   int longitud = 0;

   printf("Por favor introduzca el tamaño de su palabra\n");
   scanf("%d", &longitud);

   /*malloc reserva el tamaño de memoria que quieras
   en este caso el tamaño de un char y lo multiplicamos por 
   el numero de letras que tiene la palabra y le añadimos el
   caracter de fin de cadena (de ahi el +1)*/
   a = (char *)malloc(sizeof(char)*longitud+1);

   printf("Por favor introduzca su palabra\n");
   scanf("%s", a);

   printf("%s", a);
}

#/////////////////////////////////////////////////////#
#/////////////////////////////////////////////////////#
#//////////////////   Argumentos   ///////////////////#
#/////////////////////////////////////////////////////#
#/////////////////////////////////////////////////////#
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

int main (int argc, char ** argv){
   
   int i= 1, j=0,max=0, current;
   char* palabra=NULL;

   /*Para cada argumento exceptuando el propio programa 
   (porque argv[0] es ./nombredelprog) vemos cuantas c's tiene*/
   for(;i<argc;i++){
      current=0;
      j = 0;
      for(;j<strlen(argv[i]);j++){
         if(argv[i][j]=='c'){
            current++;
         }
      }
      /*Caso en el cual la palabra analizada tiene mas c's que el maximo actual*/
      if(max<current){
         /*Si existe la palabra*/
         if(palabra) {
            /*Liberamos espacio*/
            free(palabra);
            max= current;
            /*Lo reasignamos*/
            palabra= (char*)malloc(sizeof(char)*strlen(argv[i])+1);
            /*Guardamos la palabra analizada*/
            strcpy(palabra,argv[i]);
         }
         /*Si no existe la palabra*/
         else{
            max= current;
            /*Reservamos el tamaño de la palabra*/
            palabra= (char*)malloc(sizeof(char)*strlen(argv[i])+1);
            /*Guardamos la palabra*/
            strcpy(palabra,argv[i]);
         }
      }
   }
   printf("%s", palabra);
   return 0;
}
#/////////////////////////////////////////////////////#
#/////////////////////////////////////////////////////#
#//////////////////   Estructuras   //////////////////#
#/////////////////////////////////////////////////////#
#/////////////////////////////////////////////////////#